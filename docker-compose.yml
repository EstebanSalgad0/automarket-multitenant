# =====================================
# Docker Compose - AutoMarket MultiTenant
# =====================================
# Configuración completa para desarrollo y producción

services:
  # =====================================
  # BASE DE DATOS POSTGRESQL + SUPABASE
  # =====================================
  database:
    image: postgres:16-alpine
    container_name: automarket-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-automarket}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/01_init.sql:ro
      - ./db/schema_optimized.sql:/docker-entrypoint-initdb.d/02_schema.sql:ro
      - ./db/migration_to_optimized.sql:/docker-entrypoint-initdb.d/03_migration.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-automarket}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - automarket-network

  # =====================================
  # REDIS PARA CACHE Y SESIONES
  # =====================================
  redis:
    image: redis:7-alpine
    container_name: automarket-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - automarket-network

  # =====================================
  # FRONTEND REACT (DESARROLLO)
  # =====================================
  frontend-dev:
    build:
      context: ./app
      dockerfile: Dockerfile
      target: development
    container_name: automarket-frontend-dev
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "${FRONTEND_DEV_PORT:-5173}:5173"
    volumes:
      - ./app:/app
      - /app/node_modules
      - frontend_cache:/app/.vite
    environment:
      - NODE_ENV=development
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
      - VITE_DEFAULT_TENANT=${VITE_DEFAULT_TENANT:-demo}
      - VITE_APP_TITLE=AutoMarket MultiTenant (Dev)
      - VITE_APP_VERSION=1.0.0-dev
    networks:
      - automarket-network
    profiles:
      - development

  # =====================================
  # API BACKEND (DESARROLLO)
  # =====================================
  api-dev:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: development
    container_name: automarket-api-dev
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${API_DEV_PORT:-3001}:3001"
    volumes:
      - ./api:/app
      - /app/node_modules
      - api_logs:/app/logs
    environment:
      - NODE_ENV=development
      - PORT=3001
      - POSTGRES_HOST=database
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-automarket}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret_key}
      - FRONTEND_URL=http://localhost:5173
    networks:
      - automarket-network
    profiles:
      - development

  # =====================================
  # API BACKEND (PRODUCCIÓN)
  # =====================================
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: production
    container_name: automarket-api
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${API_PORT:-3001}:3001"
    volumes:
      - api_logs:/app/logs
      - api_uploads:/app/uploads
    environment:
      - NODE_ENV=production
      - PORT=3001
      - POSTGRES_HOST=database
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-automarket}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost}
    networks:
      - automarket-network
    profiles:
      - production

  # =====================================
  # FRONTEND REACT (PRODUCCIÓN)
  # =====================================
  frontend:
    build:
      context: ./app
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
        - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
        - VITE_APP_TITLE=AutoMarket MultiTenant
        - VITE_APP_VERSION=1.0.0
    container_name: automarket-frontend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT:-80}:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - automarket-network
    profiles:
      - production



  # =====================================
  # NGINX PROXY (PARA PRODUCCIÓN) - DESHABILITADO
  # =====================================
  # nginx-proxy:
  #   image: nginx:alpine
  #   container_name: automarket-proxy
  #   restart: unless-stopped
  #   depends_on:
  #     - frontend
  #   ports:
  #     - "${PROXY_HTTP_PORT:-80}:80"
  #     - "${PROXY_HTTPS_PORT:-443}:443"
  #   volumes:
  #     - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./config/nginx/ssl:/etc/nginx/ssl:ro
  #     - nginx_logs:/var/log/nginx
  #   networks:
  #     - automarket-network
  #   profiles:
  #     - production

  # =====================================
  # MONITORING CON PROMETHEUS - DESHABILITADO
  # =====================================
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: automarket-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "${PROMETHEUS_PORT:-9090}:9090"
  #   volumes:
  #     - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'
  #   networks:
  #     - automarket-network
  #   profiles:
  #     - monitoring

  # =====================================
  # GRAFANA PARA VISUALIZACIÓN - DESHABILITADO
  # =====================================
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: automarket-grafana
  #   restart: unless-stopped
  #   depends_on:
  #     - prometheus
  #   ports:
  #     - "${GRAFANA_PORT:-3000}:3000"
  #   environment:
  #     GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
  #     GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
  #     GF_INSTALL_PLUGINS: grafana-piechart-panel
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
  #   networks:
  #     - automarket-network
  #   profiles:
  #     - monitoring

# =====================================
# VOLÚMENES PERSISTENTES
# =====================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  frontend_cache:
    driver: local
  api_logs:
    driver: local
  api_uploads:
    driver: local

# =====================================
# REDES
# =====================================
networks:
  automarket-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16